AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AODN template: S3 data bucket

Parameters:
  BucketNamePrefix:
    Type: String
  CreateCNAME:
    Type: String
    Default: false
    AllowedValues: [ true, false ]
  ParentConstantsStack:
    Description: 'Stack name of parent constants stack based on infrastructure/accountconstants-template.yaml template.'
    Type: String
    Default: ci-network-constants
  ParentZoneStack:
    Description: 'Stack name of parent Route 53 zone stack based on vpc/zone-*.yaml template.'
    Type: String
    Default: ci-network-zone

Conditions:
  HasFixedCNAME: !Equals [ 'true', !Ref CreateCNAME ]

Resources:
  DataBucketUser:
    Type: AWS::IAM::User
  DataBucketUserAccesskey:
    Type: AWS::IAM::AccessKey
    Properties:
      Serial: 1
      UserName:
        !Ref DataBucketUser
  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['.', [ !Ref BucketNamePrefix, {'Fn::ImportValue': !Sub '${ParentConstantsStack}-ZoneNameNoTrailingDot'} ] ]
      WebsiteConfiguration:
        IndexDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedMethods:
              - GET
              - HEAD
            AllowedHeaders:
              - '*'
            MaxAge: '3000'
      Tags:
        - Key: Bucket
          Value: !Join ['.', [ !Ref BucketNamePrefix, {'Fn::ImportValue': !Sub '${ParentConstantsStack}-ZoneNameNoTrailingDot'} ] ]
  DataBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: DataBucket
      PolicyDocument:
        Statement:
          -
            Action:
              - s3:Get*
              - s3:List*
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${DataBucket}'
              - !Sub 'arn:aws:s3:::${DataBucket}/*'
            Principal: '*'
          - Action:
              - s3:DeleteObject
              - s3:PutObject
              - s3:PutObjectAcl
            Effect: Allow
            Resource:
              - !Sub 'arn:aws:s3:::${DataBucket}'
              - !Sub 'arn:aws:s3:::${DataBucket}/*'
            Principal:
              AWS: !GetAtt DataBucketUser.Arn
  CNAMERecord:
    Type: AWS::Route53::RecordSet
    Condition: HasFixedCNAME
    Properties:
      HostedZoneId: {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneId'}
      Name: !Join ['.', [ !Ref BucketNamePrefix, {'Fn::ImportValue': !Sub '${ParentZoneStack}-HostedZoneName'} ] ]
      Type: CNAME
      TTL: 60
      ResourceRecords:
        - !Sub '${DataBucket}.s3-website-${AWS::Region}.amazonaws.com.'

  # Empty Bucket
  EmptyBucketLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code: lambda/emptybucket
      Environment:
        Variables:
          PYTHONPATH: /var/task/lib:/var/runtime
      Description: 'Used to delete objects from the stack-managed S3 bucket in the stack ${AWS::StackName}'
      Handler: emptybucket.handler
      Role: !GetAtt EmptyBucketLambdaFunctionRole.Arn
      Runtime: python3.9
      Timeout: 900
      MemorySize: 512
  EmptyBucket:
    Type: Custom::EmptyBucket
    Properties:
      ServiceToken: !GetAtt EmptyBucketLambdaFunction.Arn
      BucketName: !Join ['.', [ !Ref BucketNamePrefix, {'Fn::ImportValue': !Sub '${ParentConstantsStack}-ZoneNameNoTrailingDot'} ] ]
  EmptyBucketLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:List*
                  - s3:Get*
                Resource:
                  - !Sub
                    - 'arn:aws:s3:::${BucketName}'
                    - { BucketName: !Join ['.', [ !Ref BucketNamePrefix, {'Fn::ImportValue': !Sub '${ParentConstantsStack}-ZoneNameNoTrailingDot'} ] ]}
                  - !Sub
                    - 'arn:aws:s3:::${BucketName}/*'
                    - { BucketName: !Join ['.', [ !Ref BucketNamePrefix, {'Fn::ImportValue': !Sub '${ParentConstantsStack}-ZoneNameNoTrailingDot'} ] ]}

Outputs:
  BucketUserAccesskey:
    Value: !Ref DataBucketUserAccesskey
  BucketUserAccesskeySecretKey:
    Value: !GetAtt DataBucketUserAccesskey.SecretAccessKey
  BucketName:
    Value: !Ref DataBucket
  APIEndpoint:
    Value: !GetAtt DataBucket.DomainName
  Endpoint:
    Value: !If [ HasFixedCNAME, !Sub 'http://${CNAMERecord}', !GetAtt DataBucket.WebsiteURL ]
